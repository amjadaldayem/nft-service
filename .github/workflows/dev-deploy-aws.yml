# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy the changes to the AWS Lambda function we specified.

name: Deploy to Amazon Lambda

on:
  push:
    branches:
      - master

env:
  AWS_REGION: us-west-2
  ECR_REPO_URI: 391319738221.dkr.ecr.us-west-2.amazonaws.com/nft-service
  DEPLOYMENT_ENV: dev

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get Github Short Sha
        id: get-github-short-sha
        env:
          GITHUB_SHA: ${{ github.sha }}
        run: |
          GITHUB_SHORT_SHA="$(echo ${GITHUB_SHA} | cut -c1-7)"
          echo "::set-output name=github_sha::$GITHUB_SHORT_SHA"

      - name: Build API Lambda Image
        id: build-image
        env:
          # Tagging format:
          #  repo:<env>-<process>-<hash|latest>
          # The reason why we need multiple image is that
          # for Lambda with Container, the CMD has to be built in Dockerfile.
          # We are not able to override the CMD (it won't work).
          API_TAG_HEAD: ${{ env.DEPLOYMENT_ENV }}-api-
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          GITHUB_SHA: ${{ steps.get-github-short-sha.outputs.github_sha }}
          KINESIS_PRODUCER_TAG_HEAD: ${{ env.DEPLOYMENT_ENV }}-kine-p-
          KINESIS_CONSUMER_TAG_HEAD: ${{ env.DEPLOYMENT_ENV }}-kine-c-
        run: |
          API_TAG_LATEST="${API_TAG_HEAD}latest"
          API_TAG_HASH="${API_TAG_HEAD}${GITHUB_SHA}"
          cp Dockerfile Dockerfile-api
          echo >> Dockerfile-api
          echo 'CMD ["app.web.api.handler"]' >> Dockerfile-api
          docker build -f Dockerfile-api -t $ECR_REPO_URI:API_TAG_LATEST -t $ECR_REPO_URI:API_TAG_HASH .

      - name: Login to Amazon ECR and Push All
        id: login-ecr
        env:
          ECR_REPO_URI: ${{ env.ECR_REPO_URI }}
        run: |
          aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin $ECR_REPO_URI
          docker push --all-tags $ECR_REPO_URI 
