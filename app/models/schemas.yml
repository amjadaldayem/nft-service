# The schema definition for DynamoDb. The `value` field on partition keys and
# sort keys are for documentation purpose only.
---
sme:
  name: sme
  models:
    n: app.models.NftData
    s: app.models.SecondaryMarketEvent
  pk:
    name: w
    value: s.w
    description: |
      w#<date-hour-5min_window> (in format 2022-01-31-17-00, 2022-01-31-17-05)
  sk:
    name: btt
    value: s.btt
    # By default, the type is S (string, if omitted)
    type: S
    description: |
      btt#<blockchain_id>#<timestamp>#<transaction_hash> 
      Per blockchain & Transaction timestamp & transaction hash
  read_capcity:
    default: 1
    min: 1
    max: 10
  write_capacity:
    default: 1
    min: 1
    max: 25
  lsi:
    - name: sme_lsi_collection_name
      sk:
        name: collection_name
        value: n.collection_name
        description: The local index on collection name.
      ## If no projection given, it will default to all
      # projection:
      #   keys_only
      #   all
      #   include:
      #     - attr1
      #     - attr2
    - name: sme_lsi_timestamp
      sk:
        name: timestamp
        value: e.timestamp
        type: N
        description: The local index on timestamp only (a number field)
    - name: sme_lsi_et
      sk:
        name: et
        value: e.et
        description: The local index on a single event type only.
    - name: sme_lsi_tbt
      sk:
        name: tbt
        value: e.tbt
        description: |
          Like `btt`, this is another combo of the blockchain id, transaction hash
          and timestamp, with timestamp at the beginning to give some definitely
          ordering across chains.
  gsi:
    - name: sme_gsi_sme_id
      pk:
        name: sme_id
        value: e.sme_id
      sk: ~
      description: |
        The `sme_id` consists of blockchain_id and transaction_hash (signature).
        This is unique across all chains.
      read_capcity:
        default: 1
        min: 1
        max: 10
      write_capacity:
        default: 1
        min: 1
        max: 10
    - name: sme_gsi_nft_events
      pk:
        name: nft_id
        value: n.nft_id
      sk:
        name: timestamp
        value: e.timestamp
        type: N
      read_capcity:
        default: 1
        min: 1
        max: 10
      write_capacity:
        default: 1
        min: 1
        max: 10
    - name: sme_gsi_collection_events
      pk:
        name: collection_id
        value: n.collection_id
        description: |
          The `collection_id` consists of blockchain_id and the account address for the
          collection. Unique across chains.
      sk:
        name: timestamp
        value: e.timestamp
        type: N
      read_capcity:
        default: 1
        min: 1
        max: 10
      write_capacity:
        default: 1
        min: 1
        max: 10

# NFT Table
#
#    * Facet: Nft
#        pk = <nft_id> from NftData
#        sk =
#           - 'n' literal  # NFT data
#           - 'co' literal:
#                value = 'bo#<blockchain_id>#<current_owner>'  Owning wallet address
#
#
#    * Facet: Quick Name Filter
#    ( partitioned into 26 + 10 + 1 = 37 partitions, 26 letters, 10 digits and others
#    so people type something, we immediately try the partition initializing with that
#    character, the sort key is the full name, which is matched with begins_with)
#
#        pk = qfi#<initial_letter>
#        fq = <full_name> <-- Use collection names
#
#        attribute: collection_id

nft:
  name: nft
  models:
    n: app.models.NftData
  pk:
    name: pk
    value:
      - n.nft_id
      - qfi#[a-z0-9_]  # For filter matching.
    description: |
      Depending on the use case, the PK can either be the nft id, which consists of
      blockchain_id and nft mint address: bn#<blockchain_id>#<nft_token_address>; 
      or `afi` with a single letter, which is the initial letter (lower cased) of
      the NFT name, this is for quick filtering.
  sk:
    name: sk
    value:
      - 'n'  # Literal 'n', when Pk = nft_id
      - 'co'  # Literal 'co', when Pk = nft_id
      - n.collection_name.lower()  # when Pk = qfi#[a-z0-9]
  read_capcity:
    default: 1
    min: 1
    max: 10
  write_capacity:
    default: 1
    min: 1
    max: 20

  gsi:
    - name: nft_gsi_collection_nfts
      pk:
        name: collection_id
        value: n.collection_id
      sk:
        name: nft_id
        value: n.nft_id
      read_capcity:
        default: 1
        min: 1
        max: 10
      write_capacity:
        default: 1
        min: 1
        max: 10

# User table
user:
  name: user
  models:
    u: app.models.User
  # Set pk to point to a field or a property name of corresponding models
  pk:
    name: pk
    value: u.user_id
  sk:
    name: sk
    value:
      - bn#<n.nft_id>  # Bookmarked NFTs
      - bc#<n.collection_id>  # Bookmarked collections
    type: S
  read_capcity:
    default: 1
    min: 1
    max: 10
  write_capacity:
    default: 1
    min: 1
    max: 10
  gsi:
    - name: user_gsi_emails
      pk:
        name: email
        value: u.email
      sk:
        name: sk
        value:
          - bn#<n.nft_id>  # Bookmarked NFTs
          - bc#<n.collection_id>  # Bookmarked collections
      read_capcity:
        default: 1
        min: 1
        max: 10
      write_capacity:
        default: 1
        min: 1
        max: 10
    - name: user_gsi_nickname
      pk:
        name: nickname
        value: u.nickname
      sk:
        name: sk
        value:
          - bn#<n.nft_id>  # Bookmarked NFTs
          - bc#<n.collection_id>  # Bookmarked collections
      read_capcity:
        default: 1
        min: 1
        max: 10
      write_capacity:
        default: 1
        min: 1
        max: 10