# The schema definition for DynamoDb. The `value` field on partition keys and
# sort keys are for documentation purpose only.
---
#     * Facet: Secondary Market Event Time series
#        pk = w
#             w#<date-hour-5min_window> (in format 2022-01-31-17-00, 2022-01-31-17-05)
#        sk = btt
#            btt#<blockchain_id>#<timestamp>#<transaction_hash>
#             <- Per blockchain & Transaction timestamp & transaction hash
#
#        -Lsi: Nft name
#            list_sort_key
#            name = <name> string
#
#        - Lsi: Timestamp
#            lsi_sort_key
#            timestamp = <timestamp> (Number)
#
#        - Lsi: Event Type
#            lsi_sort_key
#            et = et#<event_type>#<timestamp>  (filter by single event)
#
#        - Lsi: Event Buy & Listing
#
#            lsi_sort_key
#            eblt = eblt#<timestamp>
#                (filter by buy and listing only, optimized common case)
#    - Gsi: Transaction Events
#
#        gsi_pk = sme_id
#        gsi_sk = None
#
#    - Gsi: Nft Events
#
#        gsi_pk = nft_id
#        gsi_sk = timestamp (number)
#
#    - Gsi: Nft Collection Events, Nft Collection Price Owner changes.
#
#        gsi_pk = collection_id
#        gsi_sk = timestamp (number)
#

sme:
  name: sme
  models:
    n: app.models.NftData
    s: app.models.SecondaryMarketEvent
  pk:
    name: w
    value: s.w
  sk:
    name: btt
    value: s.btt
    # By default, the type is S (string, if omitted)
    type: S
  read_capcity:
    default: 1
    min: 1
    max: 10
  write_capacity:
    default: 1
    min: 1
    max: 20
  lsi:
    - name: sme_lsi_nft_name
      sk:
        name: name
        value: n.name
      ## If no projection given, it will default to all
      # projection:
      #   keys_only
      #   all
      #   include:
      #     - attr1
      #     - attr2
    - name: sme_lsi_timestamp
      sk:
        name: timestamp
        value: e.timestamp
        type: N
    - name: sme_lsi_et
      sk:
        name: et
        value: e.et
    - name: sme_lsi_eblt
      sk:
        name: eblt
        value: e.eblt
  gsi:
    - name: sme_gsi_sme_id
      pk:
        name: sme_id
        value: e.sme_id
      sk: ~
      read_capcity:
        default: 1
        min: 1
        max: 10
      write_capacity:
        default: 1
        min: 1
        max: 10
    - name: sme_gsi_nft_events
      pk:
        name: nft_id
        value: n.nft_id
      sk:
        name: timestamp
        value: e.timestamp
        type: N
      read_capcity:
        default: 1
        min: 1
        max: 10
      write_capacity:
        default: 1
        min: 1
        max: 10
    - name: sme_gsi_collection_events
      pk:
        name: collection_id
        value: n.collection_id
      sk:
        name: timestamp
        value: e.timestamp
        type: N
      read_capcity:
        default: 1
        min: 1
        max: 10
      write_capacity:
        default: 1
        min: 1
        max: 10

# NFT Table
#
#     nft_id = bn#<blockchain_id>#<nft_token_address>
#
#    * Facet: Nft
#        pk = <nft_id> from NftData
#        sk =
#           - 'n' literal  # NFT data
#           - 'co' literal:
#                value = 'bo#<blockchain_id>#<current_owner>'  Owning wallet address
#
#
#    * Facet: Quick Name Filter
#    ( partitioned into 26 + 10 + 1 = 37 partitions, 26 letters, 10 digits and others
#    so people type something, we immediately try the partition initializing with that
#    character, the sort key is the full name, which is matched with begins_with)
#
#        pk = qfi#<initial_letter>
#        fq = <full_name> <-- Use collection names
#
#        attribute: collection_id

nft:
  name: nft
  models:
    n: app.models.NftData
  pk:
    name: pk
    value:
      - n.nft_id
      - qfi#[a-z0-9_]  # For filter matching.
  sk:
    name: sk
    value:
      - 'n'  # Literal 'n', when Pk = nft_id
      - 'co'  # Literal 'co', when Pk = nft_id
      - n.collection_name.lower()  # when Pk = qfi#[a-z0-9]
  read_capcity:
    default: 1
    min: 1
    max: 10
  write_capacity:
    default: 1
    min: 1
    max: 20

  gsi:
    - name: nft_gsi_collection_nfts
      pk:
        name: collection_id
        value: n.collection_id
      sk:
        name: nft_id
        value: n.nft_id
      read_capcity:
        default: 1
        min: 1
        max: 10
      write_capacity:
        default: 1
        min: 1
        max: 10

# User table
user:
  name: user
  models:
    u: app.models.User
  # Set pk to point to a field or a property name of corresponding models
  pk:
    name: pk
    value: u.user_id
  sk:
    name: sk
    value:
      - bn#<n.nft_id>  # Bookmarked NFTs
      - bc#<n.collection_id>  # Bookmarked collections
    type: S
  read_capcity:
    default: 1
    min: 1
    max: 10
  write_capacity:
    default: 1
    min: 1
    max: 10
  gsi:
    - name: user_gsi_emails
      pk:
        name: email
        value: u.email
      sk:
        name: sk
        value:
          - bn#<n.nft_id>  # Bookmarked NFTs
          - bc#<n.collection_id>  # Bookmarked collections
      read_capcity:
        default: 1
        min: 1
        max: 10
      write_capacity:
        default: 1
        min: 1
        max: 10
    - name: user_gsi_nickname
      pk:
        name: nickname
        value: u.nickname
      sk:
        name: sk
        value:
          - bn#<n.nft_id>  # Bookmarked NFTs
          - bc#<n.collection_id>  # Bookmarked collections
      read_capcity:
        default: 1
        min: 1
        max: 10
      write_capacity:
        default: 1
        min: 1
        max: 10