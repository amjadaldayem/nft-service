import boto3

from app import settings


class NFTRepository:
    """
        * For NFT transactions

        Input:
          {
            "market_id": 4,
            "timestamp": 1639352756,
            "event_type": 2,
            "token_key": "DswxsZWLBzJS2HvmbzunkQWhYRbV24HHZcuhKafrNoqK",
            "price": 0,
            "owner": "DiR8xojmfXcdSK8p9DgUE7M9w9UaWY5Z7dDik12JBV4n",
            "buyer": "",
            "data": null
          }
        ->
        Data to store (key mapping)
          {
            "m": "market_id",
            "e": "event_type",
            "k": "token_key",
            "p": "price",
            "o": "owner",
            "b": "buyer",
            "d": "data",
            # Additional data to store
            "c": "collection_id",  # UUID as generated by Sintra
            # Composite fields, assembled from existing
            "pk": S -> "n#<chain_id>#<token_key>"
            "sk": N -> "timestamp"
          }

        Pk: pk
        Sk: timestamp - descending

        GSI - CollectionIndex

            Pk: collection_id
            Sk: timestamp - descending

        GSI - SecondaryMarketIndex

            Pk: market_id
            Sk: timestamp - descending


        The crawler processes all transactions in batch of 100, for each market.
        If all those are successful, save the lastest succesful hash otherwise
        the hash does not get updated and those 100 will get reprocessed.
    """

    def __init__(self,
                 table_name,
                 resource=None):
        # Creates or get the table
        self.table_name = table_name
        self.dynamodb = resource or boto3.resource(
            'dynamodb',
        )
        self.client = self.dynamodb.meta.client
        self.table = self.dynamodb.Table(self.table_name)

    def get_latest_transaction_hash(self, secondary_market_id: int):
        """


        Args:
            secondary_market_id: This is unique ID across all secondary markets
                across all chains.

        Returns:

        """
