"""nft

Revision ID: 3b98d1e87708
Revises: 03d2816b6313
Create Date: 2022-01-03 12:57:40.397043

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '3b98d1e87708'
down_revision = '03d2816b6313'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('nft_collection',
    sa.Column('id', postgresql.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('blockchain_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=True),
    sa.Column('family', sa.String(length=100), nullable=True),
    sa.Column('slug', sa.String(length=127), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('onchain_id', sa.String(length=127), nullable=True),
    sa.Column('seller_fee_basis_points', sa.Integer(), nullable=True, comment='Unit in 1/10000th, can be overridden by individual NFT.'),
    sa.Column('verified', sa.Boolean(), nullable=True),
    sa.Column('data_status', sa.SmallInteger(), nullable=True, comment='For storing the data update information for ingesting.'),
    sa.Column('creators', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='In format: [{"creator": <>, "share": <>}, ...].\n        Can be overridden by individual NFT.\n        '),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.Column('nsfw', sa.Boolean(), nullable=False),
    sa.Column('status', sa.SmallInteger(), nullable=False),
    sa.Column('launch_date', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_nft_collection_blockchain_id'), 'nft_collection', ['blockchain_id'], unique=False)
    op.create_index(op.f('ix_nft_collection_family'), 'nft_collection', ['family'], unique=False)
    op.create_index(op.f('ix_nft_collection_name'), 'nft_collection', ['name'], unique=False)
    op.create_index(op.f('ix_nft_collection_nsfw'), 'nft_collection', ['nsfw'], unique=False)
    op.create_index(op.f('ix_nft_collection_onchain_id'), 'nft_collection', ['onchain_id'], unique=False)
    op.create_index(op.f('ix_nft_collection_slug'), 'nft_collection', ['slug'], unique=False)
    op.create_index(op.f('ix_nft_collection_status'), 'nft_collection', ['status'], unique=False)
    op.create_table('nft_user_permissions',
    sa.Column('pk', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('user_id', postgresql.UUID(), nullable=False, comment='Weak ref to User ID. This should be provided from external services such as User Service.'),
    sa.Column('blockchain_id', sa.SmallInteger(), nullable=False),
    sa.Column('config', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.PrimaryKeyConstraint('pk'),
    sa.UniqueConstraint('user_id', 'blockchain_id', name='user_blockchain_uniq')
    )
    op.create_index(op.f('ix_nft_user_permissions_blockchain_id'), 'nft_user_permissions', ['blockchain_id'], unique=False)
    op.create_index(op.f('ix_nft_user_permissions_user_id'), 'nft_user_permissions', ['user_id'], unique=False)
    op.create_table('nft',
    sa.Column('id', postgresql.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('nft_collection_id', postgresql.UUID(), nullable=True),
    sa.Column('token_address', sa.String(length=127), nullable=True),
    sa.Column('name', sa.String(length=100), nullable=True),
    sa.Column('slug', sa.String(length=127), nullable=True),
    sa.Column('is_mutable', sa.Boolean(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('metadata_uri', sa.Text(), nullable=True),
    sa.Column('animation_url', sa.Text(), nullable=True),
    sa.Column('external_url', sa.Text(), nullable=True),
    sa.Column('seller_fee_basis_points', sa.Integer(), nullable=True, comment='Unit in 1/10000th, can be overridden by individual NFT.'),
    sa.Column('creators', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='In format: [{"creator": <>, "share": <>}, ...].\n        Can be overridden by individual NFT.\n        '),
    sa.Column('ext_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Extra data extracted from metadata content.\n        '),
    sa.Column('rarity_score_1', sa.String(length=16), nullable=True, comment='A rarity score'),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['nft_collection_id'], ['nft_collection.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_nft_name'), 'nft', ['name'], unique=False)
    op.create_index(op.f('ix_nft_nft_collection_id'), 'nft', ['nft_collection_id'], unique=False)
    op.create_index(op.f('ix_nft_slug'), 'nft', ['slug'], unique=False)
    op.create_index(op.f('ix_nft_token_address'), 'nft', ['token_address'], unique=False)
    op.create_table('nft_attribute_def',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('nft_collection_id', postgresql.UUID(), nullable=True),
    sa.Column('name', sa.String(length=64), nullable=False),
    sa.Column('value', sa.String(length=127), nullable=False),
    sa.Column('cat1', sa.String(length=64), nullable=False),
    sa.Column('cat2', sa.String(length=64), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['nft_collection_id'], ['nft_collection.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_nft_attribute_def_name'), 'nft_attribute_def', ['name'], unique=False)
    op.create_index(op.f('ix_nft_attribute_def_nft_collection_id'), 'nft_attribute_def', ['nft_collection_id'], unique=False)
    op.create_index(op.f('ix_nft_attribute_def_value'), 'nft_attribute_def', ['value'], unique=False)
    op.create_table('nft_collection_subscriptions',
    sa.Column('pk', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('user_id', postgresql.UUID(), nullable=False, comment='Weak ref to User ID. This should be provided from external services such as User Service.'),
    sa.Column('nft_collection_id', postgresql.UUID(), nullable=True),
    sa.Column('subscribed_at', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('unsubscribed_at', postgresql.TIMESTAMP(), nullable=True),
    sa.ForeignKeyConstraint(['nft_collection_id'], ['nft_collection.id'], ),
    sa.PrimaryKeyConstraint('pk')
    )
    op.create_index(op.f('ix_nft_collection_subscriptions_nft_collection_id'), 'nft_collection_subscriptions', ['nft_collection_id'], unique=False)
    op.create_index(op.f('ix_nft_collection_subscriptions_user_id'), 'nft_collection_subscriptions', ['user_id'], unique=False)
    op.create_table('nft_attributes',
    sa.Column('pk', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('nft_id', postgresql.UUID(), nullable=True),
    sa.Column('nad_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['nad_id'], ['nft_attribute_def.id'], ),
    sa.ForeignKeyConstraint(['nft_id'], ['nft.id'], ),
    sa.PrimaryKeyConstraint('pk')
    )
    op.create_index(op.f('ix_nft_attributes_nad_id'), 'nft_attributes', ['nad_id'], unique=False)
    op.create_index(op.f('ix_nft_attributes_nft_id'), 'nft_attributes', ['nft_id'], unique=False)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_nft_attributes_nft_id'), table_name='nft_attributes')
    op.drop_index(op.f('ix_nft_attributes_nad_id'), table_name='nft_attributes')
    op.drop_table('nft_attributes')
    op.drop_index(op.f('ix_nft_collection_subscriptions_user_id'), table_name='nft_collection_subscriptions')
    op.drop_index(op.f('ix_nft_collection_subscriptions_nft_collection_id'), table_name='nft_collection_subscriptions')
    op.drop_table('nft_collection_subscriptions')
    op.drop_index(op.f('ix_nft_attribute_def_value'), table_name='nft_attribute_def')
    op.drop_index(op.f('ix_nft_attribute_def_nft_collection_id'), table_name='nft_attribute_def')
    op.drop_index(op.f('ix_nft_attribute_def_name'), table_name='nft_attribute_def')
    op.drop_table('nft_attribute_def')
    op.drop_index(op.f('ix_nft_token_address'), table_name='nft')
    op.drop_index(op.f('ix_nft_slug'), table_name='nft')
    op.drop_index(op.f('ix_nft_nft_collection_id'), table_name='nft')
    op.drop_index(op.f('ix_nft_name'), table_name='nft')
    op.drop_table('nft')
    op.drop_index(op.f('ix_nft_user_permissions_user_id'), table_name='nft_user_permissions')
    op.drop_index(op.f('ix_nft_user_permissions_blockchain_id'), table_name='nft_user_permissions')
    op.drop_table('nft_user_permissions')
    op.drop_index(op.f('ix_nft_collection_status'), table_name='nft_collection')
    op.drop_index(op.f('ix_nft_collection_slug'), table_name='nft_collection')
    op.drop_index(op.f('ix_nft_collection_onchain_id'), table_name='nft_collection')
    op.drop_index(op.f('ix_nft_collection_nsfw'), table_name='nft_collection')
    op.drop_index(op.f('ix_nft_collection_name'), table_name='nft_collection')
    op.drop_index(op.f('ix_nft_collection_family'), table_name='nft_collection')
    op.drop_index(op.f('ix_nft_collection_blockchain_id'), table_name='nft_collection')
    op.drop_table('nft_collection')
    # ### end Alembic commands ###
